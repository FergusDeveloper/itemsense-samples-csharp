// Generated by Xamasoft JSON Class Generator
// http://www.xamasoft.com/json-class-generator

using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace ItemSense
{

    internal class JobResponse
    {

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("readerNames")]
        public string[] ReaderNames { get; set; }

        [JsonProperty("creationTime")]
        public string CreationTime { get; set; }

        [JsonProperty("lastActivityTime")]
        public string LastActivityTime { get; set; }

        [JsonProperty("activeDuration")]
        public string ActiveDuration { get; set; }

        [JsonProperty("errorOccurred")]
        public bool ErrorOccurred { get; set; }

        [JsonProperty("errors")]
        public object[] Errors { get; set; }

        [JsonProperty("facilities")]
        public Facility[] Facilities { get; set; }

        [JsonProperty("job")]
        public ResponseJob Job { get; set; }

        [JsonProperty("instanceMetadata")]
        public object InstanceMetadata { get; set; }

        [JsonProperty("lastHeartbeatTime")]
        public object LastHeartbeatTime { get; set; }
    }

    internal class Facility
    {
        [JsonProperty("name")]
        public string Name { get; set; }
    }

    internal class ResponseJob
    {
        [JsonProperty("recipeName")]
        public string RecipeName { get; set; }

        [JsonProperty("durationSeconds")]
        public int DurationSeconds { get; set; }

        [JsonProperty("playbackLoggingEnabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? PlaybackLoggingEnabled { get; set; }

        [JsonProperty("presenceLoggingEnabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? PresenceLoggingEnabled { get; set; }

        [JsonProperty("startDelay", NullValueHandling = NullValueHandling.Ignore)]
        public string StartDelay { get; set; }

        [JsonProperty("reportToDatabaseEnabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool ReportToDatabaseEnabled { get; set; }

        [JsonProperty("reportToMessageQueueEnabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool ReportToMessageQueueEnabled { get; set; }

        [JsonProperty("reportToFileEnabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ReportToFileEnabled { get; set; }

        [JsonProperty("facility", NullValueHandling = NullValueHandling.Ignore)]
        public string Facility { get; set; }
    }
}
